java内存结构总览：
    1.线程共享区（所有线程共享的区域）
        1.方法区
            存储运行时常量池以及已被加载的类信息、常量、静态变量、即时编译器编译后的代码与数据
        2.堆
            对象实例
    2.线程独占区
        1.虚拟机栈（栈内存就是说的这个区域）
        2.本地方法栈 （为调用本地方法服务）
        3.程序计数器（记录当前线程所执行字节码的行号）

程序计数器：
    1.所占内存大小很小
    2.可以看做程序字节码执行的行号
    3.处于线程独占区
    4.如果指定的是java代码，程序计数器指向字节码行号，若果执行的是本地方法native，则程序计数器为undefined
    5.此区域是为一个java虚拟机没有规定内存溢出的区域
虚拟机栈 ：
    1.java方法运行的动态内存模型
    2.栈帧
        每个方法执行都会存储一个栈帧
        用来存储方法的局部变量表、操作数栈、动态连接、方法出口
        局部变量表 ：
            存放在编译器就可知的数据类型、引用类型以及returnAdress类型
            局部变量表的内存空间在编译器就已经完成分配，在栈帧中的内存大小是固定的，在方法运行时，也不会改变其大小
        当栈帧存满虚拟机栈时，会出现StackOverFlowError
本地方法栈 ：　同上，只不过是为本地方法库中的方法服务
堆 ：
    1.存放对象实例
    2.垃圾回收管理器主要处理的区域
    3.新生代 、 老生代 、 Eden区域
方法区 ：
    1.java虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码与数据
        类信息 ： 版本、字段、方法、接口、运行时常量池
            运行时常量池  intern() 方法，会将对内存中的常量扔到方法区的常量池中
    2.方法区与永久代
    3.垃圾回收在方法区的行为
    4.异常的定义
直接内存： 堆外内存
